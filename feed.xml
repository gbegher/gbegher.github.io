<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schematic</title>
    <description>A research blog about category theory and programming</description>
    <link>gbegher.github.io/</link>
    <atom:link href="gbegher.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Jan 2018 09:54:39 -0600</pubDate>
    <lastBuildDate>Fri, 12 Jan 2018 09:54:39 -0600</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Introduction</title>
        <description>&lt;h1 id=&quot;hello-and-welcome&quot;&gt;Hello and welcome.&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I am Gerrit Begher, a mathematician and software engineer living in Berlin. The goal of this blog is to serve as a notepad for my research. It contains surveys, sketches and research notes about the connection between higher category theorety and programming languages. Some knowledge of category theory is required, of course. This post contains a roadmap of the upcoming topics I intend to write about. In the future, I will eventually extend it in order to provide additional explanations and framing for the individual posts.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;arrowized-programming&quot;&gt;Arrowized programming&lt;/h2&gt;

&lt;p&gt;Arrows provide an abstraction for computation. We start out this section with a series of posts providing a survey.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From monads to monad comprehension and back again&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We give an introduction to monads on a cartesian monoidal category. We then introduce monad comprehension as a way to write programs. Finally, we arrive at the slogan “A monad is something that lets us interpret monad comprehensions”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrows as an abstraction for computation&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: Some notions of computation can not be modeled using monads. The more general concept of arrows provides an abstraction to deal with these shortcomings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Form arrows to arrow comprehension and back again&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: Just as for monads there is also a notion of comprehension for arrows. It allows for a very convenient way to compose computations with arrows . We repeat our discussion of monads and investigate the slogan “An arrow is something that lets us interpret arrow comprehensions”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Digression: Generators in Javascript and arrow comprehension&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We imagine a better world where Javascript has pure functions - and thus cloneable generators - and investigate how comprehension can be related to generator functions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Lavwere theory for arrow expressions&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We introduce a lavwere theory capturing the syntactic structure of arrow comprehension expressions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-grothendieck-construction&quot;&gt;The Grothendieck construction&lt;/h2&gt;

&lt;p&gt;The Grothendiek construction provides a way to capture the slogan “The whole is more than the sum of its parts”. It explains how individual parts can be glued together to form a larger object. Conversely, it also gives us a way to describe decompositions of objects. Our goal is to understand how the Grothendiek construction relates to arrow comprehension.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction I a: Indexed direct sums of sets&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We give an introduction to indexed sums of sets and how they relate to partitions of a set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction I b: Set comprehension&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We take a close look at one of the most common syntactic elements of mathematical texts: Set comprehension.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction II a: Presheaves and distributors&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We investigate on how to take into account additional structure on the indexing set - namely that of a category - and how to generalize this to families of sets indexed by two categories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction III a: Indexed and fibered categories&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: After adding structure to the base as described in &lt;strong&gt;Part II a&lt;/strong&gt; we now add structure to objects we index. Specifically, we define indexed categories and fibered categories and establish an equivalence between the two concepts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction II b: Enriched distributors&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Research  notes&lt;/em&gt;: We give an explicit description of a generalization of the Grothendieck construction for presheaves and distributors to the setting of enriched categories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction III b: Decomposition of enriched categories&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Research notes&lt;/em&gt;: We describe a Grothendieck construction for enriched categories indexed by an enriched category and compare the construction to classical indexed categories.
`&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction IV: Power graphs&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We investigate the relation between power graphs - a tool used to understand and visualize large graphs - and the Grothendieck construction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction V: Directed (acyclic) graphs&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Survey&lt;/em&gt;: We generalize the relation between power graphs and the Grothendieck construction to directed graphs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grothendieck construction VI: Comprehension and nested DAGs&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Research notes&lt;/em&gt;: We describe how comprehension expressions can be compiled into DAGs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 12 Jan 2018 00:00:00 -0600</pubDate>
        <link>gbegher.github.io/2018/01/12/welcome/</link>
        <guid isPermaLink="true">gbegher.github.io/2018/01/12/welcome/</guid>
        
        
        <category>Introduction</category>
        
        <category>Overview</category>
        
      </item>
    
  </channel>
</rss>
